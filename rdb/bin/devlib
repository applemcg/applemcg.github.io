backup_oneperday () 
{ 
    : date: 2020-08-31;
    rd_lslt | column month day name | select_first day | awk NF | column name | headoff
}
tw_cmdtempl () 
{ 
    : the tw template for an rdb command;
    set -- ${1:-julian};
    printf "[[rdb commands]] | [[$1]]\n\n\n";
    tw_funtempl $1
}
tw_utltempl () 
{ 
    : the tw template for an rdb utility;
    set -- ${1:-julian};
    printf "[[utility commands]] | [[$1]]\n\n\n";
    tw_funtempl $1
}
tw_funtempl () 
{ 
    set -- ${1:-width};
    printf "<<tabs \"";
    printf "[[${1}_code]] [[${1}_testcase]] [[${1}_testdata]] [[${1}_testout]]";
    printf "\" \"[[${1}_testcase]]\" \"\" \"tc-vertical\">>\n"
}
worknotrd () 
{ 
    : date: 2020-08-24;
    set -- ${1:--13};
    comm $1 <(functions bin/rdlib|sort) <(column command < working.rdb  | headoff| sort)
}
awk_funs () 
{ 
    : date: 2020-09-18;
    awk '$1 ~ /function/ { sub(/ *{.*/, ""); print  }' ../lib/awklib
}
gjtwo_test () 
{ 
    : date: 2020-09-18;
    column < juliantest.rdb | addcol jday gregday gjday diff | compute '
    
        jday = date

    ' | julian jday | compute 'gregday = jday' | gregorian gregday | compute '

        gjday = gregday

    ' | julian gjday | compute '

        diff = jday - gjday
    '
}
gjone_test () 
{ 
    : date: 2020-09-18;
    . rdlib;
    report_notfile juliantest.rdb && return 1;
    column < juliantest.rdb | addcol jday gday | compute 'jday = date' | julian jday | compute 'gday = jday' | row 'NR < 2' | gregorian gday
}
hdr_use () 
{ 
    : where is rdb_hdr used in non-{HEAD,arg} situations;
    : date: 2020-09-21;
    fuse rdb_hdr | grep -v '$HEAD' | grep -v '$[*@]'
}
any_testfun () 
{ 
    set | functions | grep _test
}
rdb_testfun () 
{ 
    : rdb TEST functions;
    : date: 2020-09-23;
    runfrom $(applemcg echo)/rdb || return 1;
    declare -f $(column command < command.rdb | headoff | sed 's/$/_test/')
}
bad_status () 
{ 
    : date: 2020-09-24;
    set -- statusvalue.rdb cmmd_status.rdb;
    comm -13 <(column status < $1  | sorttable -u | headoff) <(column status < $2  | sorttable -u | headoff)
}
rdu_abstract () 
{ 
    : function one-line abstracts;
    : date: 2020-09-24;
    rdb_hdr fun abstract;
    foreach shd_abstract ${*:-shd_abstract} | nf gt 1
}
rdu_libtable () 
{ 
    : utility library home table report;
    : date: 2020-09-24;
    report_notfile $1 && return 1;
    set $1 ${1%.*};
    ( rdb_hdr name library table;
    do_whf $(column name < $1 | headoff ) | onebyN ) | compute " table = \"$2\""
}
rdu_libtable_test () 
{ 
    : tests both rdu_{abstract,libtable}, joining the products, as intended;
    : ~ PATH-findable library, extracts functions abstracts;
    : date: 2020-09-24;
    report_notargcount 1 $# && return 1;
    lib=$(which $1);
    report_notfile $lib && return 2;
    file=$(basename $lib);
    abstr=${file}_abstract.rdb;
    read_devtty abstr: $abstr;
    rdu_abstract $(functions $lib) | tee $abstr | tiddlylink name | twoColumnTiddly > rdu_abstract.out;
    rdu_libtable $abstr | jointable - $abstr > rdu_libtable.out;
    wc rdu_{abstract,libtable}.out 1>&2
}
cmmd_type () 
{ 
    : date: 2020-09-27;
    ( rdb_hdr command type;
    do_whf $(column command < cmmd_status.rdb  | headoff ) ) | compute 'type = ((!type)? "cmmd": "func")' > $(myname).rdb
}
table_csort () 
{ 
    : date: 2020-09-28;
    set -- ${1:-tables.rdb};
    set -- $1 ${1%.*}.nxt;
    comment $*;
    column < $1 | sorttable > $2;
    wc $* 1>&2;
    echo $2 $1
}
fun_abstract () 
{ 
    : functions abstracts;
    : date: 2020-10-03;
    runfrom $(lib) || return;
    set $(myname).rdb shd_alldata.lst;
    newest $* || { 
        cat $2 | column name abstr | listtotable | rename name fun abstr abstract | row abstract > $1
    };
    cat $1
}
libtag_process () 
{ 
    : the steps for routine update;
    : date: 2020-10-10;
    cat <<'HERE'
    foreach f2file $(lib_changed 6);
    name_library;
    shd_tagcolumn
    lib pushd
    tag_count
    table_report | rowhas table _library;    
    set -- $(pick < shd_datadict.txt)
    listtototable < shd_alldata.lst | column fun $* 
HERE

}
tabcat () 
{ 
    : concatenate table files;
    : date: 2020-10-11;
    report_notargcount 1 $# && return 1;
    local r=${1%.*};
    for suf in .{rdb,lst,txt,nxt,tmp} "";
    do
        local f=$r$suf;
        [[ -f $f ]] && { 
            cat $f;
            return
        };
    done
}
table_keycount () 
{ 
    : return Count, key of local tables;
    : date: 2020-10-11;
    table_report | column fields | rename fields key | compute 'key = substr(key,1,index(key," "))' | sorttable | rduniq
}
fun_column () 
{ 
    : functions with column ...;
    : date: 2020-10-14;
    runfrom $(lib) || return;
    set -- ${1:-$(pick $(< shd_tagdatadict.txt))};
    listtotable < shd_alldata.lst | row $1 | column fun $1
}
tiddly_tagtable () 
{ 
    : writes the "tag table" tiddler in Shell Functions;
    : date: 2020-10-15;
    function tag_table () 
    { 
        jointable tag_count.rdb tag_group.rdb
    };
    runfrom $(lib) || return;
    cat $(table_me tag_table ) | tiddlylink tag | tiddlylink group | fourColumnTiddly
}
tiddly_taggroup () 
{ 
    : writes the table for the "tag group" tiddler;
    : date: 2020-10-15;
    runfrom $(lib) || return;
    column group < tag_group.rdb | awk NF | sorttable | rduniq | tiddlylink group | twoColumnTiddly
}
tiddly_help () 
{ 
    : tiddly function names;
    : date: 2020-10-20;
    sfg -i tiddl
}
rule_run () 
{ 
    : from the rdb_rules, select and run;
    : the magic is in the "source <( ... )", saving a TMP file;
    : date: 2020-10-21;
    local r=$(rule_file);
    read_devtty r: $r;
    report_notargcount 1 $# && { 
        $(rule_show);
        return 1
    };
    source <(rule_show cat | rowhas rule $1 | rule_cmd)
}
rule_cmd () 
{ 
    : construct the source-able command from selected input, command, arguments fields;
    : date: 2020-10-21;
    addcol out | compute 'out=sprintf("%s | %s %s", input, command, arguments)' | column out | headoff | tee .rule.out}
}
rule_file () 
{ 
    : date: 2020-10-21;
    local file=rdb_rules.lst;
    [[ -f $file ]] || { 
        rdb_hdr rule input command arguments | tabletolist > $file
    };
    ${*:-echo} $file
}
rule_show () 
{ 
    : show the table of command rules, a local rule file.;
    : date: 2020-10-21;
    local r=$(rule_file);
    read_devtty rdb_rules: $(ls -l ${r%.*}.*);
    listtotable < ${r%.*}.lst | tee ${r%.*}.rdb | ${1:-justify}
}
twotiddlylinks () 
{ 
    : two tiddly links to an {N:four} column tiddly table;
    : date: 2020-10-21;
    set $1 $2 ${3:-four}ColumnTiddly;
    report_notfunction $3 && return 1;
    tee $(myname).rdb | tiddlylink $1 | tiddlylink $2 | $3
}
onetiddlylink () 
{ 
    : two tiddly links to an {N:four} column tiddly table;
    : date: 2020-10-21;
    set $1 ${2:-four}ColumnTiddly;
    report_notfunction $2 && return 1;
    tiddlylink $1 | $3
}
row_notcolumn () 
{ 
    : discard the column where a row matches the 2nd argument;
    : date: 2020-10-21;
    read_devtty 1, 2: $*;
    row "$1 ~ /$2/" | ncolumn $1
}
rule_help () 
{ 
    : date: 2020-10-21;
    sfg rule
}
