# justify -- an /rdb table, so each column is wide enough

# count() { echo $* | awk ' { 
# 	for ( i=$1; i<=$2; i++) { 
# 	      printf "%d ", i; 
# 	      }
# 	 } 
# END		{ printf "\n"; }'
# }
TMP=.
[ -w . ] || TMP=$HOME/.
FILE=${TMP}file.$$
trap 'rm -f $FILE .tmp.sh' 0 1 2 3 15
#
#  ---------------------------------------------------- Justify	-- 
#
#   Find the widest entry in each column, with the "widest" command.
#  It prints out an /rdb 3-line table: header, dashes, and width of
#  each column
# "set -- " captures the results in the postional parameters: 1, 2,
# ... N, so that
#     "$*"   are the respective column widths, and
#     "$#" is the number of columns
# 
#   The first "sed" writes out the formatting statment, with enough
#  string formats, each with a width, to accomdate each positional
#  parameter.  "eval echo {1..$#}" generates the first $# integers
#  which are converted into $1, ..., $N and the whole thing is spliced
#  onto one line with the 'tr \012'...
# 
#   this all appears as the awk program, which is constructed on the
#  fly with the starting and closing lines.  ... and then executed
#  "sh"
#  
(
 set -- $(cat ${1:--} | tee $FILE | widest | tail +3)
 printf "awk -F'\t' '\nNF { "
   echo $*		| sed 's/^/printf("%-/; s/ /s\\t%-/g; s/$/s\\n",/'  | tr '\012'  ' '; 
   eval echo {1..$#} 	| sed 's/ *$//; s/^/\$/; s/ /, $/g; s/$/)/'
 echo " }' $FILE"
) | tee .tmp.sh | sh
